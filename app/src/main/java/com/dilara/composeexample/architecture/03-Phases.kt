package com.dilara.composeexample.architecture

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

/**
 * ============================================================================
 * ğŸŸ¦ Jetpack Compose Phases (Frame Rendering AÅŸamalarÄ±)
 * ============================================================================
 * Compose, her frame'i Ã¼Ã§ ana fazda iÅŸler:
 *
 * 1-Composition: Hangi UI gÃ¶sterilecek? (Composable fonksiyonlar Ã§alÄ±ÅŸÄ±r, UI aÄŸacÄ± kurulur)
 * 2-Layout: Nerede gÃ¶sterilecek? (Her node'un boyutu ve konumu belirlenir)
 * 3-Drawing: NasÄ±l Ã§izilecek? (Her node ekrana Ã§izilir)
 *
 * Bu fazlar, Compose'un performanslÄ± ve reaktif olmasÄ±nÄ± saÄŸlar. State deÄŸiÅŸimlerinde sadece gerekli fazlar tetiklenir.
 *
 */

// -----------------------------------------------------------------------------
/**
 * 1- Composition Phase
 * -----------------------------------------------------------------------------
 * AmaÃ§: Hangi UIâ€™nÄ±n gÃ¶sterileceÄŸine karar verilir. Yani Compose, composable fonksiyonlarÄ± Ã§alÄ±ÅŸtÄ±rÄ±r ve bir UI aÄŸacÄ± (tree) oluÅŸturur.
 * State OkumasÄ±: EÄŸer bir state burada okunursa, o state deÄŸiÅŸtiÄŸinde ilgili composable fonksiyon tekrar Ã§alÄ±ÅŸÄ±r (recomposition olur).
 * Ne zaman tetiklenir? Sadece UIâ€™nÄ±n yapÄ±sÄ± (gÃ¶sterilecek widgetâ€™lar, dallanma, koÅŸul vs.) deÄŸiÅŸirse bu faz tekrar Ã§alÄ±ÅŸÄ±r.
 *
 * Pratik: State'i burada okumak, UI'nÄ±n yeniden kurulmasÄ±na sebep olur.
 */
@Composable
fun CompositionPhaseExample() {
    var showDetails by remember { mutableStateOf(false) } // State burada tanÄ±mlanÄ±yor ve okunuyor
    Column(Modifier.padding(16.dp)) {
        Text("Stock: AKBNK", fontSize = 20.sp)
        if (showDetails) {  //State burada okunuyor, true/false'a gÃ¶re UI deÄŸiÅŸiyor
            Text("Price: 36.2â‚º", color = Color.Gray)
        }
        Spacer(Modifier.height(8.dp))
        Text(
            text = if (showDetails) "Hide Details" else "Show Details",
            color = Color.Blue,
            modifier = Modifier
                .background(Color(0xFFE3F2FD))
                .padding(8.dp)
                .clickable { showDetails = !showDetails } //TÄ±klanÄ±nca state deÄŸiÅŸiyor, recomposition tetikleniyor
        )
    }
}
// State burada okunuyor, showDetails deÄŸiÅŸirse sadece bu composable recompose olur.

// -----------------------------------------------------------------------------
/**
 *2- Layout Phase
 * -----------------------------------------------------------------------------
 * - UI aÄŸacÄ±ndaki her node'un boyutu ve konumu belirlenir.
 * - State okumasÄ± burada yapÄ±lÄ±rsa, sadece layout ve drawing fazÄ± tekrar Ã§alÄ±ÅŸÄ±r (daha verimli!).
 * - Ã–zellikle scroll, offset, animasyon gibi deÄŸerler iÃ§in state'i layout fazÄ±nda okumak performans kazandÄ±rÄ±r.
 *
 * Pratik: Offset, scroll gibi deÄŸerleri layout fazÄ±nda okumak iÃ§in lambda kullanan Modifier'larÄ± tercih et.
 */
@Composable
fun LayoutPhaseOptimizedExample() {
    val listState = rememberLazyListState()
    Box(Modifier.height(200.dp)) {
        // GÃ¶rseli, scroll offset'e gÃ¶re yukarÄ± kaydÄ±r (parallax)
        Image(
            painter = painterResource(android.R.drawable.ic_menu_gallery),
            contentDescription = null,
            modifier = Modifier
                .fillMaxWidth()
                .height(100.dp)
                .offset {
                    // State burada layout fazÄ±nda okunur, sadece layout ve draw tetiklenir
                    IntOffset(
                        x = 0,
                        y = -listState.firstVisibleItemScrollOffset / 2
                    ) //Lambda, layout sÄ±rasÄ±nda Ã§alÄ±ÅŸÄ±r ve dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼n IntOffset deÄŸeri, gÃ¶rselin ekrandaki konumunu belirler.
                    //Burada state okursan, sadece layout ve drawing fazÄ± tekrar Ã§alÄ±ÅŸÄ±r, gereksiz recomposition olmaz.
                },
            contentScale = ContentScale.Crop
        )
        LazyColumn(state = listState, modifier = Modifier.fillMaxSize()) {
            items(30) { idx ->
                Text("Item $idx", modifier = Modifier.padding(16.dp))
            }
        }
    }
}
//EÄŸer offset(y = ...) gibi doÄŸrudan deÄŸer verirsen, state composition phaseâ€™de okunur.
//EÄŸer offset { ... } ile lambda verirsen, state layout phaseâ€™de okunur.
// Parallax efekti iÃ§in offset lambda kullanmak, gereksiz recomposition'Ä± Ã¶nler.

// -----------------------------------------------------------------------------
/**
 * 3- Drawing Phase
 * -----------------------------------------------------------------------------
 * - Her node, ekrana Ã§izilir (Canvas, Modifier.drawBehind, Modifier.drawWithContent).
 * - State okumasÄ± burada yapÄ±lÄ±rsa, sadece draw fazÄ± tekrar Ã§alÄ±ÅŸÄ±r (en verimli!).
 *
 * Pratik: SÄ±k deÄŸiÅŸen, sadece gÃ¶rsel efekt olan state'leri draw fazÄ±nda oku.
 */
@Composable
fun DrawingPhaseExample() {
    var color by remember { mutableStateOf(Color.Red) }
    Box(
        Modifier
            .size(120.dp)
            .background(Color.LightGray)
            .drawBehind {
                // State burada okunuyor, color deÄŸiÅŸirse sadece draw fazÄ± tekrar Ã§alÄ±ÅŸÄ±r
                drawCircle(color, radius = size.minDimension / 2)
            }
            .clickable { color = if (color == Color.Red) Color.Green else Color.Red }
    )
}
// drawBehind ile sadece renk deÄŸiÅŸiminde draw fazÄ± tetiklenir, UI'nÄ±n geri kalanÄ± etkilenmez.

// -----------------------------------------------------------------------------
/**
 * -----------------------------------------------------------------------------
 * - State'i mÃ¼mkÃ¼n olduÄŸunca geÃ§ fazda (draw > layout > composition) oku. Ã–rneÄŸin, sadece gÃ¶rsel efekt iÃ§in deÄŸiÅŸen bir state'i draw fazÄ±nda okursan, tÃ¼m UI yerine sadece Ã§izim gÃ¼ncellenir.
 * - Modifier.offset, Modifier.padding, Modifier.height gibi lambda alan versiyonlarÄ± kullanmak, state'in layout fazÄ±nda okunmasÄ±nÄ± saÄŸlar ve gereksiz recomposition'Ä± Ã¶nler.
 *
 *   // YanlÄ±ÅŸ: State doÄŸrudan okunuyor (composition phase)
 *   Modifier.offset(y = scrollOffset)
 *
 *   // DoÄŸru: State lambda ile okunuyor (layout phase)
 *   Modifier.offset { IntOffset(0, scrollOffset) }
 *
 * - SÄ±k deÄŸiÅŸen state'ler iÃ§in derivedStateOf kullanarak gereksiz recomposition'Ä± engelle:
 *
 *   // YanlÄ±ÅŸ: Her scroll deÄŸiÅŸiminde tÃ¼m composable recompose olur
 *   val isAtTop = listState.firstVisibleItemIndex == 0
 *
 *   // DoÄŸru: derivedStateOf ile sadece gerÃ§ekten deÄŸiÅŸince tetiklenir
 *   val isAtTop by remember { derivedStateOf { listState.firstVisibleItemIndex == 0 } }
 *
 * - onSizeChanged, onGloballyPositioned gibi callback'lerde state gÃ¼ncellerken dikkatli ol:
 *   - Bu pattern, state gÃ¼ncellemesiyle tekrar callback tetiklenirse sonsuz dÃ¶ngÃ¼ye (recomposition loop) yol aÃ§abilir!
 *   - MÃ¼mkÃ¼nse custom layout veya parent koordinasyonu ile state gÃ¼ncelle.
 *
 *   // YanlÄ±ÅŸ: onSizeChanged iÃ§inde doÄŸrudan state gÃ¼ncellemek
 *   Box(Modifier.onSizeChanged { size -> myState = size.width })
 *
 *   // DoÄŸru: State'i parent composable'da yÃ¶netmek veya side-effect ile gÃ¼ncellemek
 *
 * - State'i composition fazÄ±nda okuman gerekiyorsa, derivedStateOf veya snapshotFlow ile filtrele. Ã–zellikle animasyon, scroll gibi hÄ±zlÄ± deÄŸiÅŸen deÄŸerlerde recomposition'Ä± minimize et.
 *
 * - Compose, sadece gerekli fazlarÄ± tekrar Ã§alÄ±ÅŸtÄ±rÄ±r; state'in hangi fazda okunduÄŸu Ã§ok Ã¶nemlidir! FazÄ± optimize ederek hem performans hem de enerji verimliliÄŸi kazanÄ±rsÄ±n.
 *
 *   Kural: State'i ne kadar geÃ§ fazda okursan, o kadar az iÅŸ yapÄ±lÄ±r ve UI daha akÄ±cÄ± olur.
 */